#!/bin/bash
#
if [[ $# == 2 ]]
then
    rg=$1
    days=$2
elif [[ $# == 1 ]]
then
    rg=$1
else
    echo "Usage: $0 rgId days"
    exit 1
fi

datelist='{'
for((i=1;i<=days;i++))
do
        day=$(date +',.%Y%m%d*' -d"$i day ago")
        datelist="$datelist$day"
        from_day=$(date +'%Y%m%d' -d"$i day ago")
done
datelist="${datelist}}"
datenow=$(date '+%Y%m%d')
dump_data=dump_data.${datenow}
echo "dump log from $from_day to $datenow to $dump_data"

zgrep "This\|candidateCount" /root/dump_data.dat | grep REPO_SCAN > $dump_data

for((index=0;index<128;index++))
do
    ob="OB_${index}_128_0:"
    eval $( awk -v urn="${rg}_${ob}" '$7=="Saving" && $11~urn && $12=="candidateCount"{
                                        candidateCount=$13;
                                        failedCandidateCount=$15;
                                        lastTaskTime=$17;
                                    }
                                    $8=="This" && $9=="round" && $13~urn{
                                        roundtime=substr($1,index($1,":")+1,19);
                                        duration=$17;
                                    }
                                    END{
                                        printf "candidateCount=%d;failedCandidateCount=%d;lastTaskTime=%d\n",candidateCount,failedCandidateCount,lastTaskTime;
                                        printf "lastEndtime=%s;lastDuration=%s\n",roundtime,duration;
                                    }
                                ' ${dump_data} )
    printf "%13s candidateCount %9s, failedCandidateCount %6s, lastTaskTime %13s, lastEndtime %19s, lastDuration %11s\n"\
           $ob $candidateCount $failedCandidateCount $lastTaskTime $lastEndtime $lastDuration
done > GCVerificationAnalysis.log.${datenow}.${rg}
rm ${dump_data}

